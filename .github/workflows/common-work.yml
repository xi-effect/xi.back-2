name: Common Pipeline Steps

on:
  workflow_call:
    inputs:
      tag:
        type: string
        required: true
      base-tag:
        type: string
        required: false
      database:
        type: boolean
        required: false
        default: true
      coverage:
        type: boolean
        required: false
        default: true

jobs:
  prepare:
    runs-on: ubuntu-latest

    env:
      repository_cache_name: back-2
      postgres_schema: ${{ inputs.database && 'xi_back_2' || '' }}

    services:
      db:
        image: postgres:16.1-alpine
        env:
          PGUSER: test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
          cache: pip

      - name: Install Poetry
        uses: snok/install-poetry@v1.3.4
        with:
          version: 1.8.2
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load Cached Venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4.2.0
        with:
          path: .venv
          key: ${{ env.repository_cache_name }}-venv-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ env.repository_cache_name }}-venv-

      - name: Load Cached Pre-commit
        uses: actions/cache@v4.2.0
        with:
          path: ~/.cache/pre-commit
          key: ${{ env.repository_cache_name }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: ${{ env.repository_cache_name }}-pre-commit-

      - name: Load Mypy Cache
        uses: actions/cache@v4.2.0
        with:
          path: .mypy_cache
          key: ${{ env.repository_cache_name }}-mypy

      - name: Install Dependencies
        run: poetry install --no-interaction --no-root

      - name: Activate virtualenv
        id: venv
        run: |
          source .venv/bin/activate
          echo PATH=$PATH >> $GITHUB_ENV

      - name: Setup database for migrationless tests
        if: '!inputs.database'
        run: |
          source .venv/bin/activate
          python -m app.setup_ci

      - name: Upgrade database to latest migration
        if: inputs.database
        run: alembic upgrade head

      - name: Check that database is up to date with code
        if: inputs.database
        run: |
          alembic revision --autogenerate -m 'test' --rev-id 0
          lines=$(cat ./alembic/versions/0_test.py | wc -l)
          echo $lines
          if [ $lines -ne 30 ]; then
            exit 1
          fi

      - name: Run pytest
        run: pytest tests -p no:cacheprovider --cov=app ${{ !inputs.coverage && '--cov-fail-under=0' || ''}}
        env:
          postgres_automigrate: false

      - name: Run pre-commit for all files
        if: success() || (failure() && steps.venv.conclusion == 'success')
        run: pre-commit run --show-diff-on-failure --color=always --all-files

  build:
    needs: prepare
    uses: xi-effect/xi.actions/.github/workflows/docker-build.yml@main
    with:
      tag: ${{ inputs.tag }}
      base-tag: ${{ inputs.base-tag }}
    secrets: inherit
