"""xi_auth_merge

Revision ID: 028
Revises: 027
Create Date: 2025-05-31 14:16:57.208530

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "028"
down_revision: Union[str, None] = "027"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "support_tickets",
        sa.Column("message_thread_id", sa.Integer(), nullable=False),
        sa.Column("chat_id", sa.BigInteger(), nullable=False),
        sa.Column("closed", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("message_thread_id", name=op.f("pk_support_tickets")),
        schema="xi_back_2",
    )
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("email", sa.String(length=100), nullable=False),
        sa.Column("username", sa.String(length=30), nullable=False),
        sa.Column("password", sa.String(length=100), nullable=False),
        sa.Column("display_name", sa.String(length=30), nullable=True),
        sa.Column(
            "onboarding_stage",
            sa.Enum(
                "CREATED",
                "COMMUNITY_CHOICE",
                "COMMUNITY_CREATE",
                "COMMUNITY_INVITE",
                "COMPLETED",
                name="onboarding_stage",
            ),
            nullable=False,
        ),
        sa.Column("theme", sa.String(length=10), nullable=False),
        sa.Column("reset_token", sa.CHAR(length=50), nullable=True),
        sa.Column("last_password_change", sa.DateTime(timezone=True), nullable=False),
        sa.Column("email_confirmed", sa.Boolean(), nullable=False),
        sa.Column(
            "allowed_confirmation_resend", sa.DateTime(timezone=True), nullable=False
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_users")),
        schema="xi_back_2",
    )
    op.create_index(
        "hash_index_users_email",
        "users",
        ["email"],
        unique=False,
        schema="xi_back_2",
        postgresql_using="hash",
    )
    op.create_index(
        "hash_index_users_token",
        "users",
        ["reset_token"],
        unique=False,
        schema="xi_back_2",
        postgresql_using="hash",
    )
    op.create_index(
        "hash_index_users_username",
        "users",
        ["username"],
        unique=False,
        schema="xi_back_2",
        postgresql_using="hash",
    )
    op.create_table(
        "sessions",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("token", sa.CHAR(length=50), nullable=False),
        sa.Column("expires_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("is_disabled", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("is_cross_site", sa.Boolean(), nullable=False),
        sa.Column("is_mub", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["xi_back_2.users.id"],
            name=op.f("fk_sessions_user_id_users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_sessions")),
        schema="xi_back_2",
    )
    op.create_index(
        "hash_index_session_token",
        "sessions",
        ["token"],
        unique=False,
        schema="xi_back_2",
        postgresql_using="hash",
    )
    op.alter_column(
        "invitations",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
        schema="xi_back_2",
    )
    op.alter_column(
        "participants",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
        schema="xi_back_2",
    )
    op.alter_column(
        "posts",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
        schema="xi_back_2",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "posts",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
        schema="xi_back_2",
    )
    op.alter_column(
        "participants",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
        schema="xi_back_2",
    )
    op.alter_column(
        "invitations",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
        schema="xi_back_2",
    )
    op.drop_index(
        "hash_index_session_token",
        table_name="sessions",
        schema="xi_back_2",
        postgresql_using="hash",
    )
    op.drop_table("sessions", schema="xi_back_2")
    op.drop_index(
        "hash_index_users_username",
        table_name="users",
        schema="xi_back_2",
        postgresql_using="hash",
    )
    op.drop_index(
        "hash_index_users_token",
        table_name="users",
        schema="xi_back_2",
        postgresql_using="hash",
    )
    op.drop_index(
        "hash_index_users_email",
        table_name="users",
        schema="xi_back_2",
        postgresql_using="hash",
    )
    op.drop_table("users", schema="xi_back_2")
    op.drop_table("support_tickets", schema="xi_back_2")
    # ### end Alembic commands ###
