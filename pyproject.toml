[project]
name = "xi-back-2"
version = "0.1.0"
description = "Main backend service for xi.effect"
authors = [
    {name = "niqzart", email = "qwert45hi@yandex.ru"},
    {name = "xi.team", email = "xieffect@yandex.ru"},
]
readme = "README.md"
requires-python = "~=3.12,<4.0"
dynamic = ["dependencies"]

[build-system]
requires = ["poetry-core==2.1.3"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
package-mode = false

[tool.poetry.dependencies]
fastapi = "^0.115.12"
uvicorn = {extras = ["standard"], version = "^0.34.2"}
python-multipart = "^0.0.20"
sqlalchemy = {extras = ["asyncio"], version = "^2.0.40"}
psycopg = {extras = ["binary"], version = "3.1.19"}
pydantic-marshals = {extras = ["sqlalchemy"], version = "0.3.18"}
alembic = "^1.15.2"
redis = {extras = ["hiredis"], version = "^5.1.1"}
filetype = "^1.2.0"
httpx = "^0.28.1"
tmexio = "0.2.1"
pydantic-settings = "^2.9.1"
livekit-api = "^1.0.2"
passlib = "^1.7.4"
cryptography = "^42.0.5"
discord-webhook = {extras = ["async"], version = "^1.3.1"}
aiogram = "^3.4.1"
aiosmtplib = "^3.0.2"
itsdangerous = "^2.2.0"

[tool.poetry.group.types.dependencies]
types-passlib = "^1.7.7.13"
types-redis = "^4.6.0"

[tool.poetry.group.dev.dependencies]
watchfiles = "^0.21.0"

[tool.poetry.group.lint.dependencies]
pre-commit = "^3.8.0"
black = "25.1.0"
isort = "6.0.1"
mypy = "1.15.0"
flake8 = "7.0.0"
flake8-pie = "0.16.0"
flake8-coding = "1.3.2"
flake8-secure-coding-standard = "1.4.1"
flake8-unused-arguments = "0.0.13"
flake8-pytest-style = "1.7.2"
flake8-useless-assert = "0.4.4"
flake8-simplify = "0.19.3"
flake8-future-import = "0.4.7"
flake8-functions-names = "0.4.0"
flake8-variables-names = "0.0.5"
flake8-comments = "0.1.2"
flake8-annotations = "2.9.1"
flake8-new-union-types = "0.4.1"
flake8-pep585 = "0.1.7"
flake8-type-checking = "2.3.1"
flake8-print = "5.0.0"
flake8-use-fstring = "1.4"
flake8-use-pathlib = "0.3.0"
flake8-test-name = "0.1.6"
wemake-python-styleguide = "0.18.0"
dlint = "0.14.0"

[tool.poetry.group.tests.dependencies]
pytest = "^8.3.5"
pytest-cov = "^6.1.1"
pytest-lazy-fixtures = "^1.3.4"
pydantic-marshals = {extras = ["assert-contains"], version = "0.3.18"}
freezegun = "^1.5.1"
respx = "^0.22.0"
polyfactory = "^2.21.0"
faker = "^37.1.0"
faker-file = "^0.18.4"
rstr = "^3.2.2"
pillow = "^11.2.1"

[tool.isort]
profile = "black"
py_version = 312
combine_as_imports = true
known_first_party = ["app", "tests"]
no_lines_before = "LOCALFOLDER"
reverse_relative = true
line_length = 88

[tool.mypy]
strict = true
warn_unreachable = true
warn_redundant_casts = true
disable_error_code = ["prop-decorator"]  # computed_field
plugins = [
  "pydantic.mypy",
  "pydantic_marshals.mypy.plugin",
]

[tool.pydantic-mypy]
init_typed = false
init_forbid_extra = true
warn_required_dynamic_aliases = true

[tool.coverage.run]
concurrency = ["greenlet", "thread"]
sigterm = true

[tool.coverage.report]
show_missing = true
skip_covered = true

fail_under = 100

exclude_also = [
  "pragma: no cover",
  "if TYPE_CHECKING:",
  "if( not)? settings.production_mode",
  "if settings.postgres_automigrate",
  "except ImportError",
  "raise AssertionError",
  "raise NotImplementedError",
  "assert_never",
  "else:\n *?assert_never",
  "case _:\n *?assert_never",
  "if __name__ == [\"']__main__[\"']:",
  "class .*\\(Protocol\\):",
  "@abstractmethod",
  "custom_swagger_ui_html",
  "custom_openapi",
  "@mark.skip",
  "!wow!",
]

omit = [
  "alembic/*",
  "tests/*",
  "app/common/aiogram_ext.py",
  "app/common/fastapi_ext.py",
  "app/common/sqlalchemy_ext.py",
  "app/common/starlette_cors_ext.py",
  "app/common/tmexio_ext.py",
  "app/setup_ci.py",
  "app/common/abscract_models/ordered_lists_db.py",  # TODO (33602197)
]
